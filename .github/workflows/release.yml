name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a GitHub release'
        required: true
        default: true
        type: boolean

jobs:
  build:
    name: Build Addon
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build addon
        run: npm run build
      
      - name: Get version from package.json
        id: package-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"
      
      - name: Verify build output
        run: |
          VERSION=${{ steps.package-version.outputs.version }}
          if [ -f "dist/$VERSION/joker-$VERSION.zip" ]; then
            echo "✓ Build artifact found: dist/$VERSION/joker-$VERSION.zip"
            ls -lh "dist/$VERSION/joker-$VERSION.zip"
          else
            echo "❌ Build artifact not found!"
            exit 1
          fi
      
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: joker-${{ steps.package-version.outputs.version }}
          path: dist/${{ steps.package-version.outputs.version }}/joker-${{ steps.package-version.outputs.version }}.zip
          retention-days: 90
  
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && inputs.create_release)
    
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Get version from package.json
        id: package-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
      
      - name: Get addon version from Joker.txt
        id: addon-version
        run: |
          ADDON_VERSION=$(grep "^## AddOnVersion:" Joker.txt | awk '{print $3}')
          echo "addon_version=$ADDON_VERSION" >> $GITHUB_OUTPUT
          echo "Addon Version: $ADDON_VERSION"
      
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: joker-${{ steps.package-version.outputs.version }}
          path: ./release
      
      - name: Verify downloaded artifact
        run: |
          echo "Contents of release directory:"
          ls -lh ./release/
      
      - name: Create release notes
        id: release-notes
        run: |
          cat > release_notes.md << 'EOF'
          ## Joker ESO Addon v${{ steps.package-version.outputs.version }}
          
          **Version:** ${{ steps.package-version.outputs.version }}  
          **Addon Version:** ${{ steps.addon-version.outputs.addon_version }}
          
          ### Installation
          
          1. Download `joker-${{ steps.package-version.outputs.version }}.zip`
          2. Extract the contents to your ESO AddOns folder:
             - **Windows:** `Documents\Elder Scrolls Online\live\AddOns\`
             - **Mac:** `~/Documents/Elder Scrolls Online/live/AddOns/`
          3. Or use an addon manager like [Minion](https://minion.mmoui.com/)
          
          ### What's New
          
          See the commit history for changes in this release.
          
          ---
          
          Like this project? Consider [buying me a coffee](https://www.buymeacoffee.com/adefee)!
          EOF
          cat release_notes.md
      
      - name: Determine tag name
        id: tag-name
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG_NAME="v${{ steps.package-version.outputs.version }}"
          else
            TAG_NAME="${GITHUB_REF#refs/tags/}"
          fi
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "Using tag: $TAG_NAME"
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag-name.outputs.tag }}
          name: Joker v${{ steps.package-version.outputs.version }}
          body_path: release_notes.md
          files: |
            ./release/joker-${{ steps.package-version.outputs.version }}.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
